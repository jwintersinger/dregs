#!/usr/bin/env python3
import argparse
import sys
from dregs import binf

def parse_seqs(fasta_fd):
  seq_names   = []
  seq_lengths = []

  for seq_id, seq in binf.parse_fasta(fasta_fd):
    seq_len = len(seq)
    seq_lengths.append(seq_len)
    seq_id = seq_id.split()[0]
    seq_names.append(seq_id)

  return (seq_names, seq_lengths)

def print_seq_stats(seq_lengths, cutoff):
  num_seqs = len(seq_lengths)
  total_seq_length = sum(seq_lengths)
  print('seq_count: %s (%.2e)' % (num_seqs, num_seqs))
  print('total_len: %s (%.2e)' % (total_seq_length, total_seq_length))

  threshold = binf.calculate_n50(seq_lengths, cutoff)
  print('n%s: %s (%.2e)' % (cutoff, threshold, threshold))

def print_longest_seqs(seq_names, seq_lengths, seqs_to_print, print_longest_seq_names):
  seqs_with_lengths = zip(seq_names, seq_lengths)
  seqs_with_lengths = list(seqs_with_lengths)
  seqs_with_lengths.sort(key = lambda t: t[1], reverse = True)

  num_seqs = len(seqs_with_lengths)
  total_seq_length = sum(seq_lengths)
  num_longest_seqs = min(seqs_to_print, num_seqs)
  longest_seqs_length = sum(seq_lengths[:num_longest_seqs])

  print('longest_seqs_len_sum: %s (%.2e) (%s seqs comprising %.2f%% total length)' % (
    longest_seqs_length,
    longest_seqs_length,
    num_longest_seqs,
    longest_seqs_length / total_seq_length * 100)
  )

  if print_longest_seq_names:
    print()
    for i in range(num_longest_seqs):
      seq_name, seq_len = seqs_with_lengths[i]
      print('pos=%s\tlen=%s\tname=%s' % (i + 1, seq_len, seq_name))

def graph_seq_length_dist(graph_fname, seq_lengths):
  import matplotlib
  # Force matplotlib not to use X11 backend, which produces exception when run
  # over SSH.
  matplotlib.use('Agg')
  import matplotlib.pyplot as plt

  matplotlib.rcParams.update({'font.size': 12})
  plt.figure()
  plt.yscale('symlog')
  # Make room for axis labels at bottom.
  plt.subplots_adjust(bottom=0.15)
  n, bins, patches = plt.hist(seq_lengths, facecolor='green', alpha=0.5)
  plt.xticks(bins, rotation=-90)

  plt.title('Distribution of sequence lengths')
  plt.xlabel('Sequence length')
  plt.ylabel('Sequences')
  plt.savefig(graph_fname)

def main():
  parser = argparse.ArgumentParser(description='Calculate N50 for FASTA file.')
  parser.add_argument('fasta_file', nargs='?', type=argparse.FileType('r'), default=sys.stdin)
  parser.add_argument('-n', dest='cutoff', action='store', type=int, choices=range(101), default=50)
  parser.add_argument('-g', dest='graph_fname', action='store')

  parser.add_argument('-l', dest='print_longest_seqs', action='store_true', default=False)
  parser.add_argument('-c', dest='num_longest_seqs', action='store', type=int, default=100)
  parser.add_argument('-p', dest='print_longest_seq_names', action='store_true', default=False)
  args = parser.parse_args()

  seq_names, seq_lengths = parse_seqs(args.fasta_file)

  print_seq_stats(seq_lengths, args.cutoff)
  if args.print_longest_seqs:
    print_longest_seqs(seq_names, seq_lengths, args.num_longest_seqs, args.print_longest_seq_names)
  if args.graph_fname:
    graph_seq_length_dist(args.graph_fname, seq_lengths)

if __name__ == '__main__':
  main()
